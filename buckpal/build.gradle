import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
    id "com.google.devtools.ksp" version "${kspVersion}"
    id "groovy"
    id "com.netflix.nebula.facet" version "${facetVersion}"
    id "idea"
    id "io.micronaut.library" version "${micronautLibraryVersion}"
}

micronaut {
    runtime("netty")
    testRuntime("spock2")
}

repositories {
    mavenCentral()
}

facets {
    domain
    domainTest {
        parentSourceSet = "test"
    }
    application
    applicationTest {
        parentSourceSet = "test"
    }
    inboundRest
    inboundRestTest {
        parentSourceSet = "test"
    }
    outboundPersistence
    outboundPersistenceTest {
        parentSourceSet = "test"
    }
}

dependencies {
    ksp("io.micronaut.data:micronaut-data-processor")

    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.spockframework:spock-core"
    testRuntimeOnly "net.bytebuddy:byte-buddy:1.14.13"
    testRuntimeOnly "org.objenesis:objenesis:3.3"

    domainTestImplementation sourceSets.domain.output

    applicationImplementation sourceSets.domain.output
    applicationImplementation "javax.transaction:javax.transaction-api:1.3"
//    applicationRuntimeOnly "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0"
    applicationTestImplementation sourceSets.domain.output
    applicationTestImplementation sourceSets.application.output
    applicationTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0"

    inboundRestImplementation sourceSets.domain.output
    inboundRestImplementation sourceSets.application.output
    inboundRestImplementation "io.micronaut:micronaut-http-server-netty"
    inboundRestImplementation "io.micronaut:micronaut-jackson-databind"
//    inboundRestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0"
    inboundRestTestImplementation sourceSets.domain.output
    inboundRestTestImplementation sourceSets.application.output
    inboundRestTestImplementation "io.micronaut:micronaut-http-client"
    inboundRestTestRuntimeOnly sourceSets.inboundRest.output
    inboundRestTestRuntimeOnly "io.micronaut:micronaut-http-server-netty"
    inboundRestTestRuntimeOnly "io.micronaut:micronaut-jackson-databind"
    inboundRestTestRuntimeOnly "ch.qos.logback:logback-classic"
    inboundRestTestRuntimeOnly "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0"

    outboundPersistenceImplementation sourceSets.domain.output
    outboundPersistenceImplementation sourceSets.application.output
    outboundPersistenceImplementation "io.micronaut.data:micronaut-data-r2dbc"
    outboundPersistenceImplementation "jakarta.persistence:jakarta.persistence-api:3.1.0"
    outboundPersistenceImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0"
    outboundPersistenceTestImplementation sourceSets.domain.output
    outboundPersistenceTestImplementation sourceSets.application.output
    outboundPersistenceTestImplementation sourceSets.outboundPersistence.output
    outboundPersistenceTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0"
    outboundPersistenceTestImplementation "ch.qos.logback:logback-classic"
    outboundPersistenceTestImplementation "io.micronaut.data:micronaut-data-r2dbc"
    outboundPersistenceTestImplementation "jakarta.persistence:jakarta.persistence-api:3.1.0"
}

configurations {
    buckpalJars {
        canBeConsumed = true
        canBeResolved = false
        // If you want this configuration to share the same dependencies, otherwise omit this line
//        extendsFrom implementation, runtimeOnly
        extendsFrom domainImplementation, domainRuntimeOnly
        extendsFrom applicationImplementation, applicationRuntimeOnly
        extendsFrom inboundRestImplementation, inboundRestRuntimeOnly
        extendsFrom outboundPersistenceImplementation, outboundPersistenceRuntimeOnly
    }
}

task buckpalJar(type: Jar) {
    from sourceSets.domain.output
    from sourceSets.application.output
    from sourceSets.inboundRest.output
    from sourceSets.outboundPersistence.output
}

artifacts {
    buckpalJars(buckpalJar)
}

tasks.named('compileKotlin', KotlinCompilationTask) {
    compilerOptions {
        jvmTarget = JvmTarget.JVM_17
        javaParameters = true
    }
}
